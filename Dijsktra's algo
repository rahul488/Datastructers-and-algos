import java.util.*;

class Dj{
	public static void main(String[] args) {

		int vertex=9;
		
		int [][] graph={{0,4,0,0,0,0,0,8,0},
						{4,0,8,0,0,0,0,11,0},
						{0,8,0,7,0,4,0,0,2},
						{0,0,7,0,9,14,0,0,0},
						{0,0,0,9,0,10,0,0,0},
						{0,0,4,14,10,0,2,0,0},
						{0,0,0,0,0,2,0,1,6},
						{8,11,0,0,0,0,1,0,7},
						{0,0,2,0,0,0,6,7,0},
					   };

		PriorityQueue<Node> pq=new PriorityQueue<>((a,b)->a.cost-b.cost);
		Set<Integer> set=new HashSet<Integer>();
		pq.add(new Node(0,0));
		int d[]=new int[9];
		while(!pq.isEmpty()){
			Node node=pq.poll();
			int u=node.src; 
			int v=node.cost;
			if(set.contains(u))
				continue;
			d[u]=v;
			set.add(u);

				for(int j=0;j<9;j++){
					if(!set.contains(j) && graph[u][j]!=0){
						int dest=j;
						pq.add(new Node(dest,v+graph[u][j]));
					}
				}
		}
		for(int i=0;i<9;i++)
			System.out.println(i+" "+d[i]);
		
	}
}
class Node{
	int src;
	int cost;
	Node(int src,int cost){
		this.src=src;
		this.cost=cost;
	}
}

***OutPut***
--------------
0 0
1 4
2 12
3 19
4 21
5 11
6 9
7 8
8 14

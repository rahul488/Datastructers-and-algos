import java.util.*;

class Node
{
	int data;
	Node left;
	Node right;
	
	public Node(int data)
	{
		this.data=data;
		left=null;
		right=null;
	}
}
public class Bst 
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		Node root=null;
		while(true)
		{
			System.out.println("1.insert");
			System.out.println("2.inOrder");
			System.out.println("3.preOrder");
			System.out.println("4.postOrder");
			System.out.println("5.height");
			System.out.println("6.delete");
			System.out.println("7.levelOrder");
			System.out.println("8.spiralOrder");
			System.out.println("9.searching");
			System.out.println("10.exit");
			
			System.out.println("enter your choice");
			
			switch(sc.nextInt())
			{
			case 1:System.out.println("enter your data");
				   root=insert(root,sc.nextInt());
				   break;
			case 2:inOrder(root);
				   break;
			case 3:preOrder(root);
				   break;
			case 4:postOrder(root);
				   break;
			case 5:int height=height(root);
				   System.out.println("height is"+" "+height);
				   break;
			case 6:System.out.println("enter data to be deleted");
				   root=delete(root,sc.nextInt());
				   break;
			case 7:levelOrder(root);
				   break;
			case 8:spiralOrder(root);
				   break;
			case 9:System.out.println("enter data to be searched");
				   boolean x=searching(root,sc.nextInt());
				   if(x)
					   System.out.println("data is found");
				   else
					   System.out.println("data is not found");
				   break;
			case 10:System.exit(1);
			
			default:System.out.println("invalid choice");		
					
			}
			
		}
	}


	private static void levelOrder(Node root) 
	{
		int height=height(root);
		
		for(int i=0;i<height;i++)
		{
			disp(root,i);
		}
	}

	private static void disp(Node root, int i) 
	{
		if(root==null)
			return;
		if(i == 0)
		{
			System.out.print(root.data+" ");
			return ;
		}
		disp(root.left,i-1);
		disp(root.right,i-1);
	}


	private static void spiralOrder(Node root) 
	{
		int height=height(root);
		
		for(int i=0;i<height;i++)
		{
			print(root,i,0);
		}
	}

	private static void print(Node root, int i,int count) 
	{
		if(root==null)
			return;
		if(i==count)
		{
			System.out.print(root.data+" ");
			return ;
		}
		else if(i%2==0)
		{
			print(root.left,i,count+1);
			print(root.right,i,count+1);
		}
		else
		{
			print(root.right,i,count+1);
			print(root.left,i,count+1);
		}
		
	}


	private static boolean searching(Node root,int data) 
	{
		if(root==null)
		{
			return false;
		}
		if(data == root.data)
			return true;
		else if(data < root.data)
			return searching(root.left,data);
		else
			return searching(root.right,data);
	}

	private static int height(Node root) 
	{
		if(root==null)
		{
			return 0;
		}
		int leftheight=height(root.left);
		int rightheight=height(root.right);
		return (leftheight > rightheight)?leftheight+1:rightheight+1;
	}

	private static Node delete(Node root, int data) 
	{
		if(root == null)
			return null;
		if(root.left == null && root.right == null && data == root.data) {
			return null;
		}
		else if(root.left!=null && root.right==null && data == root.data)
		{
			root=root.left;
			return root;
		}
		else if(root.left==null && root.right!=null && data == root.data)
		{
			root=root.right;
			return root;
		}
		else if(data < root.data)
		{
			root.left=delete(root.left,data);
		}
		else if(data > root.data)
		{
			root.right=delete(root.right,data);
		}
		else
		{
			Node temp=findMinm(root.right);
			root.data=temp.data;
			root.right=delete(root.right,temp.data);
		}
		return root;
	}

	private static Node findMinm(Node root) 
	{
		while(root.left!=null)
		{
			root=root.left;
		}
		return root;
	}


	private static void postOrder(Node root) 
	{
		if(root!=null)
		{
			postOrder(root.left);
			postOrder(root.right);
			System.out.print(root.data+" ");
		}
	}

	private static void preOrder(Node root) 
	{
		if(root!=null)
		{
			System.out.print(root.data+" ");
			preOrder(root.left);
			preOrder(root.right);
		}
	}

	private static void inOrder(Node root) 
	{
		if(root!=null)
		{
			inOrder(root.left);
			System.out.print(root.data+" ");
			inOrder(root.right);
		}
	}

	private static Node insert(Node root, int data) 
	{
		if(root==null)
		{
			return new Node(data);
		}
		if(data < root.data)
		{
			root.left=insert(root.left,data);
		}
		else if(data > root.data)
		{
			root.right=insert(root.right,data);
		}
		return root;
	}
}
